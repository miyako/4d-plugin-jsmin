/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : JSMin
 #	author : miyako
 #	2016/10/21
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- JSMIN

		case 1 :
			JSMin(pResult, pParams);
			break;

	}
}

// ------------------------------------- JSMIN ------------------------------------

namespace jsmin
{
	PA_Unichar
	isAlphanum(PA_Unichar c)
	{
		return ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') ||
						(c >= 'A' && c <= 'Z') || c == '_' || c == '$' || c == '\\' ||
						c > 126);
	}
	
	PA_Unichar
	get(CUTF16String &src, size_t *pos)
	{
		size_t p = *pos;
		
		PA_Unichar c = src.at(p);
		p++;
		*pos = p;
		
		if (c >= ' ' || c == '\n') {
			return c;
		}
		if (c == '\r') {
			return '\n';
		}
		return ' ';
	}
	
	PA_Unichar
	peek(CUTF16String &src, size_t pos)
	{
		return jsmin::get(src, &pos);
	}
	
	PA_Unichar
	next(CUTF16String &src, size_t *pos)
	{
		PA_Unichar c = jsmin::get(src, pos);
		if  (c == '/') {
			switch (jsmin::peek(src, *pos)) {
				case '/':
					for (;;) {
						c = jsmin::get(src, pos);
						if (c <= '\n') {
							break;
						}
					}
					break;
				case '*':
					jsmin::get(src, pos);
					size_t len = src.size();
					while ((c != ' ') && (*pos < len)) {
						switch (jsmin::get(src, pos)) {
							case '*':
								if (jsmin::peek(src, *pos) == '/') {
									jsmin::get(src, pos);
									c = ' ';
								}
								break;
						}
					}
					break;
			}
		}
		return c;
	}
	
	void
	action(int d, CUTF16String &src, CUTF16String &dst,
				 size_t *pos,
				 PA_Unichar *theA, PA_Unichar *theB,
				 PA_Unichar *theX, PA_Unichar *theY)
	{
		switch (d) {
			case 1:
				if(!(!dst.size() && *theA == '\n')) //avoid empty first line
					dst += *theA;
				if (
						(*theY == '\n' || *theY == ' ') &&
						(*theA == '+' || *theA == '-' || *theA == '*' || *theA == '/') &&
						(*theB == '+' || *theB == '-' || *theB == '*' || *theB == '/')
						) {
					dst += *theY;
				}
			case 2:
				*theA = *theB;
				if (*theA == '\'' || *theA == '"' || *theA == '`') {
					for (;;) {
						dst += *theA;
						*theA = jsmin::get(src, pos);
						if (*theA == *theB) {
							break;
						}
						if (*theA == '\\') {
							dst += *theA;
							*theA = jsmin::get(src, pos);
						}
					}
				}
			case 3:
				*theB = jsmin::next(src, pos);
				if (*theB == '/' && (
														 *theA == '(' || *theA == ',' || *theA == '=' || *theA == ':' ||
														 *theA == '[' || *theA == '!' || *theA == '&' || *theA == '|' ||
														 *theA == '?' || *theA == '+' || *theA == '-' || *theA == '~' ||
														 *theA == '*' || *theA == '/' || *theA == '{' || *theA == '\n'
														 )) {
					dst += *theA;
					if (*theA == '/' || *theA == '*') {
						dst += ' ';
					}
					dst += *theB;
					for (;;) {
						*theA = jsmin::get(src, pos);
						if (*theA == '[') {
							for (;;) {
								dst += *theA;
								*theA = jsmin::get(src, pos);
								if (*theA == ']') {
									break;
								}
								if (*theA == '\\') {
									dst += *theA;
									*theA = jsmin::get(src, pos);
								}
							}
						} else if (*theA == '/') {
							switch (jsmin::peek(src, *pos)) {
								case '/':
								case '*':
									break;
							}
							break;
						} else if (*theA =='\\') {
							dst += *theA;
							*theA = jsmin::get(src, pos);
						}
						dst += *theA;
					}
					*theB = jsmin::next(src, pos);
				}
		}
	}
	
	void jsmin(CUTF16String &src, CUTF16String &dst)
	{
		size_t pos = 0;
		
		PA_Unichar theA, theB;
		PA_Unichar theX, theY;
		
		src += ';';
		src += ';';
		
		theA = 0x000A;
		theB = 0x0000;
		theX = 0x0000;
		theY = 0x0000;
		
		jsmin::action(3, src, dst, &pos, &theA, &theB, &theX, &theY);
		
		while (pos < src.size()) {
			switch (theA) {
				case ' ':
					jsmin::action(jsmin::isAlphanum(theB) ? 1 : 2, src, dst, &pos, &theA, &theB, &theX, &theY);
					break;
				case '\n':
					switch (theB) {
						case '{':
						case '[':
						case '(':
						case '+':
						case '-':
						case '!':
						case '~':
							jsmin::action(1, src, dst, &pos, &theA, &theB, &theX, &theY);
							break;
						case ' ':
							jsmin::action(3, src, dst, &pos, &theA, &theB, &theX, &theY);
							break;
						default:
							jsmin::action(jsmin::isAlphanum(theB) ? 1 : 2, src, dst, &pos, &theA, &theB, &theX, &theY);
					}
					break;
				default:
					switch (theB) {
						case ' ':
							jsmin::action(jsmin::isAlphanum(theA) ? 1 : 3, src, dst, &pos, &theA, &theB, &theX, &theY);
							break;
						case '\n':
							switch (theA) {
								case '}':
								case ']':
								case ')':
								case '+':
								case '-':
								case '"':
								case '\'':
								case '`':
									jsmin::action(1, src, dst, &pos, &theA, &theB, &theX, &theY);
									break;
								default:
									jsmin::action(jsmin::isAlphanum(theA) ? 1 : 3, src, dst, &pos, &theA, &theB, &theX, &theY);
							}
							break;
						default:
							jsmin::action(1, src, dst, &pos, &theA, &theB, &theX, &theY);
							break;
					}
			}
		}
	}
}

void JSMin(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT returnValue;

	PA_Unistring *str = (PA_Unistring *)(pParams[0]);
	CUTF16String src = CUTF16String(str->fString, str->fLength);
	CUTF16String dst;
	
	jsmin::jsmin(src, dst);
	
	returnValue.setUTF16String(&dst);
	returnValue.setReturn(pResult);
}

